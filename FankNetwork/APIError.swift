//
//  APIError.swift
//  Fank
//
//  Created by fank on 2019/4/21.
//  Copyright © 2019年 fank. All rights reserved.
//

import UIKit

public class APIError: Error, CustomStringConvertible {
    
    // Define frequently used client errors.
    public static let realmNotInitialized = APIError(message: "Realm is not initialized.")
    public static let unableToSave = APIError(message: "Unable to save data to disk.")
    public static let notJSONAPIObjectProtocol = APIError(message: "To refresh, the class must conform to JSONAPIObjectProtocol.")
    public static let notAPIObjectProtocol = APIError(message: "To refresh, the class must conform to APIObjectProtocol.")
    
    public var code : APIErrorCode
    
    public var message : String
    
    public var internalMessage : String
    
    /// The HTTP Status Code if the error was generated by an HTTP request.
    public var status : String?
    
    /// Includes meta data for error (facts etc.)
    public var meta: [String: Any]?
    
    public init(code: String, status: String?, message: String) {
        self.code = APIErrorCode(rawString: code)
        self.message = message
        self.internalMessage = message
        self.status = status
    }
    
    public init(code: String = "-1", status: String? = nil, message: String, internalMessage: String? = nil) {
        self.code = APIErrorCode(rawString: code)
        self.message = message
        self.internalMessage = internalMessage ?? message
        self.status = status
    }
    
    public init(jsonApiError: JSONAPIError) {
        self.status = jsonApiError.status
        self.code = APIErrorCode(rawString: jsonApiError.code ?? "-1")
        let msg = jsonApiError.title ?? "Unknown JSON API ERROR"
        self.message = msg
        self.internalMessage = jsonApiError.detail ?? msg
        self.meta = jsonApiError.meta ?? [:]
    }
    
    /// Logs the API Error in a standardized format
    ///
    /// - Parameter context: An optional message to append to the end of the log, useful for identifying the source of the error
    public func log(context:String = "") {
        print(self.description + ". \(context)")
    }
    
    public var description: String {
        var descriptionString = "Error: (\(code) "
        if let status = status {
            descriptionString +=  "- \(status) "
        }
        descriptionString += ") \(message) - \(internalMessage)"
        return descriptionString
    }
}

public enum APIErrorCode : String {
    
    /// The default error code.
    case unknown = "-1"
    /// The error that occurs when the user swipes away while a chat session request is being created
    case cancelled = "-999"
    /// An unrecognized error represents any error with a raw value that has not been represented in this enum.
    case unrecognized = "0"
    
    public init(rawInt: Int) {
        guard let apiError = APIErrorCode(rawValue: "\(rawInt)") else {
            print("Error: Unrecognized error code \(rawInt). You may need to add it's value to APIErrorCode.")
            self = .unrecognized
            return
        }
        self = apiError
    }
    
    public init(rawString: String) {
        guard let apiError = APIErrorCode(rawValue: rawString) else {
            print("Error: Unrecognized error code \(rawString)")
            self = .unrecognized
            return
        }
        self = apiError
    }
}
